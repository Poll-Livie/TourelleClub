C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/11/2022 13:14:13 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PCA_LIB_8BITCENTERPWM
OBJECT MODULE PLACED IN .\src/PCA_Lib_8bitCenterPWM.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.60\BIN\C51.
                    -exe /Users/paul_leveque/Documents/10_Projets/EFM8BB1_PCA_Lib_8bitCenterPWM/src/PCA_Lib_8bitCenterPWM.c OMF2 SMALL DEBUG 
                    -OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INC
                    -DIR(/Users/paul_leveque/Documents/10_Projets/EFM8BB1_PCA_Lib_8bitCenterPWM/inc;/Users/paul_leveque/Documents/10_Projets/
                    -EFM8BB1_PCA_Lib_8bitCenterPWM/inc/config;/Users/paul_leveque/Documents/10_Projets/EFM8BB1_PCA_Lib_8bitCenterPWM/drivers;
                    -/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.2.4//Lib/efm8_assert;/Applications/Simplicit
                    -y Studio.app/Contents/Eclipse/developer/sdks/8051/v4.2.4//Device/shared/si8051Base;/Applications/Simplicity Studio.app/C
                    -ontents/Eclipse/developer/sdks/8051/v4.2.4//Device/EFM8BB1/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/deve
                    -loper/sdks/8051/v4.2.4//kits/common/bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.2.4/
                    -/kits/EFM8BB1_LCK/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.2.4//Device/EFM8BB1
                    -/peripheral_driver/inc) PRINT(.\src/PCA_Lib_8bitCenterPWM.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/PCA_Lib_8
                    -bitCenterPWM.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // PCA_Lib_8bitCenterPWM.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program sends two center-aligned PWM waveforms out of two I/O pins
  10          // using the PCA's 8-bit Center-Aligned PWM Output Mode. The duty cycles of
  11          // the waveforms are modified periodically within the main loop, and the
  12          // waveforms are increasing/decreasing opposite of each other.
  13          //
  14          // In this example, PCA Modules 0 and 1 are used to generate the waveforms, and
  15          // the crossbar is configured to send the CEX0 signal out on P1.4 and the CEX1
  16          // signal out on P1.5.
  17          //
  18          // Resources:
  19          //   SYSCLK - 24.5 MHz HFOSC / 1
  20          //   PCA    - 8-bit PWM
  21          //   P0.0   - SPI SCK
  22          //   P0.1   - SPI MISO
  23          //   P0.2   - SPI MOSI
  24          //   P0.3   - SPI NSS
  25          //   P1.4   - PCA CEX0 / LED
  26          //
  27          //-----------------------------------------------------------------------------
  28          // How To Test: EFM8BB1 LCK
  29          //-----------------------------------------------------------------------------
  30          // 1) Connect the EFM8BB1 LCK board to a PC using a micro USB cable.
  31          // 2) Compile and download code to the EFM8BB1 LCK board.
  32          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  33          //    click the Debug button in the quick menu, or press F11.
  34          // 3) Run the code.
  35          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  36          //    click the Resume button in the quick menu, or press F8.
  37          // 4) Place an oscilloscope probe on P1.4 and P1.5.
  38          // 5) Verify that the duty cycle of the waveforms vary smoothly between
  39          //    minimum and maximum values.
  40          //
  41          // Target:         EFM8BB1
  42          // Tool chain:     Generic
  43          //
  44          // Release 0.1 (ST)
  45          //    - Initial Revision
C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/11/2022 13:14:13 PAGE 2   

  46          //    - 10 OCT 2014
  47          //
  48          
  49          //-----------------------------------------------------------------------------
  50          // Includes
  51          //-----------------------------------------------------------------------------
  52          #include "bsp.h"
  53          #include "InitDevice.h"
  54          
  55          #include "SPI0_Lib_Slave.h"
  56          #include "spi_0.h"
  57          #include <string.h>
  58          
  59          #include "pca_0.h"
  60          
  61          #include "direction.h"
  62          //-----------------------------------------------------------------------------
  63          // Prototypes
  64          //-----------------------------------------------------------------------------
  65          
  66          uint8_t TransferByte(uint8_t tx);
  67          
  68          //-----------------------------------------------------------------------------
  69          // Global Variables
  70          //-----------------------------------------------------------------------------
  71          
  72          SI_SEGMENT_VARIABLE(SPI_TxBuf[MAX_BUFFER_SIZE+1],
  74                              uint8_t,
  74                              EFM8PDL_SPI0_TX_SEGTYPE);
  75          SI_SEGMENT_VARIABLE(SPI_RxBuf[MAX_BUFFER_SIZE+1],
  77                              uint8_t,
  77                              EFM8PDL_SPI0_RX_SEGTYPE);
  78          
  79          uint8_t test_value_rx = 0;
  80          uint8_t test_array_rx[MAX_BUFFER_SIZE];
  81          
  82          //-----------------------------------------------------------------------------
  83          // Functions
  84          //-----------------------------------------------------------------------------
  85          
  86          // Receive a byte from the master
  87          uint8_t ReceiveCommand(void)
  88          {
  89   1        // Send dummy byte and read command byte
  90   1        return TransferByte(0xFF);
  91   1      }
  92          
  93          // Send and receive a byte
  94          uint8_t TransferByte(uint8_t tx)
  95          {
  96   1        // Send tx byte
  97   1        SPI0_writeByte(tx);
  98   1      
  99   1        // Return rx byte
 100   1        while (SPI0_isRxEmpty());
 101   1        return SPI0_readByte();
 102   1      }
 103          
 104          // Send the response for the specified command (if necessary)
 105          void SendResponse(uint8_t command)
 106          {
 107   1        uint8_t i;
 108   1      
C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/11/2022 13:14:13 PAGE 3   

 109   1        switch (command)
 110   1        {
 111   2          case SPI_WRITE:
 112   2            test_value_rx = TransferByte(0xFF);
 113   2            break;
 114   2      
 115   2          case SPI_READ:
 116   2            TransferByte(test_value_rx);
 117   2            break;
 118   2      
 119   2          case SPI_WRITE_BUFFER:
 120   2            for (i = 0; i < MAX_BUFFER_SIZE; i++)
 121   2            {
 122   3              test_array_rx[i] = TransferByte(0xFF);
 123   3            }
 124   2            break;
 125   2      
 126   2          case SPI_READ_BUFFER:
 127   2            for (i = 0; i < MAX_BUFFER_SIZE; i++)
 128   2            {
 129   3              TransferByte(test_array_rx[i]);
 130   3            }
 131   2            break;
 132   2      
 133   2          case SLAVE_LED_ON:
 134   2            BSP_LED0 = BSP_LED_ON;
 135   2            break;
 136   2      
 137   2          case SLAVE_LED_OFF:
 138   2            BSP_LED0 = BSP_LED_OFF;
 139   2            break;
 140   2        }
 141   1      }
 142          
 143          //-----------------------------------------------------------------------------
 144          // SiLabs_Startup() Routine
 145          // ----------------------------------------------------------------------------
 146          // This function is called immediately after reset, before the initialization
 147          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
 148          // useful place to disable the watchdog timer, which is enable by default
 149          // and may trigger before main() in some instances.
 150          //-----------------------------------------------------------------------------
 151          void SiLabs_Startup (void)
 152          {
 153   1        // Disable the watchdog here
 154   1      }
 155           
 156          //-----------------------------------------------------------------------------
 157          // Main Routine
 158          //-----------------------------------------------------------------------------
 159          void main(void)
 160          {
 161   1        // uint16_t delay_count;             // Used to implement a delay
 162   1        bool duty_direction0 = 0;          // Module 0: 0 = Decrease; 1 = Increase
 163   1        bool duty_direction1 = 0;          // Module 1: 0 = Increase; 1 = Decrease
 164   1      
 165   1        uint8_t duty_cycle0 = 0x80;
 166   1        uint8_t duty_cycle1 = 0xFF;
 167   1      
 168   1        uint8_t command;
 169   1      
 170   1      
 171   1        enter_DefaultMode_from_RESET();
C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/11/2022 13:14:13 PAGE 4   

 172   1        init_portsIn();
 173   1      
 174   1        while (1)
 175   1        {
 176   2            // command = ReceiveCommand();
 177   2      
 178   2            // Send the command response to the master
 179   2            // SendResponse(command);
 180   2      
 181   2            go_forward(0x80);
 182   2      
 183   2      
 184   2        }
 185   1      }
*** WARNING C280 IN LINE 168 OF /Users/paul_leveque/Documents/10_Projets/EFM8BB1_PCA_Lib_8bitCenterPWM/src/PCA_Lib_8bitC
             -enterPWM.c: 'command': unreferenced local variable
 186          
 187          
 188          /*
 189           * // Wait
 190              for (delay_count = 30000; delay_count > 0; delay_count--);
 191          
 192              // Module 0
 193              if (duty_direction0 == 1)               // Direction = Increase
 194              {
 195                // First, check the ECOM0 bit
 196                if ((PCA0CPM0 & PCA0CPM0_ECOM__BMASK) == PCA0CPM0_ECOM__DISABLED)
 197                {
 198                  PCA0CPM0 |= PCA0CPM0_ECOM__BMASK;   // Set ECOM0 if it is '0'
 199                }
 200                else                                  // Increase duty cycle otherwise
 201                {
 202                  duty_cycle0--;                      // Increase duty cycle
 203          
 204                  PCA0_writeChannel(PCA0_CHAN0, duty_cycle0 << 8);
 205          
 206                  if (duty_cycle0 == 0x00)
 207                  {
 208                    duty_direction0 = 0;              // Change direction for next time
 209                  }
 210                }
 211              }
 212              else                                    // Direction = Decrease
 213              {
 214                if (duty_cycle0 == 0xFF)
 215                {
 216                  PCA0CPM0 &= ~PCA0CPM0_ECOM__BMASK;  // Clear ECOM0
 217                  duty_direction0 = 1;                // Change direction for next time
 218                }
 219                else
 220                {
 221                  duty_cycle0++;                      // Decrease duty cycle
 222          
 223                  PCA0_writeChannel(PCA0_CHAN0, duty_cycle0 << 8);
 224                }
 225              }
 226          
 227              // Module 1
 228              if (duty_direction1 == 1)               // Direction = Decrease
 229              {
 230                // First, check the ECOM1 bit
 231                if ((PCA0CPM1 & PCA0CPM1_ECOM__BMASK) == PCA0CPM1_ECOM__DISABLED)
 232                {
C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/11/2022 13:14:13 PAGE 5   

 233                  PCA0CPM1 |= PCA0CPM1_ECOM__BMASK;   // Set ECOM1 if it is '0'
 234                }
 235                else                                  // Increase duty cycle otherwise
 236                {
 237                  duty_cycle1++;                      // Decrease duty cycle
 238          
 239                  PCA0_writeChannel(PCA0_CHAN1, duty_cycle1 << 8);
 240          
 241                  if (duty_cycle1 == 0xFF)
 242                  {
 243                    duty_direction1 = 0;              // Change direction for next time
 244                  }
 245                }
 246              }
 247              else                                    // Direction = Increase
 248              {
 249                if (duty_cycle1 == 0x00)
 250                {
 251                  PCA0CPM1 &= ~PCA0CPM1_ECOM__BMASK;  // Clear ECOM1
 252                  duty_direction1 = 1;                // Change direction for next time
 253                }
 254                else
 255                {
 256                  duty_cycle1--;                      // Increase duty cycle
 257          
 258                  PCA0_writeChannel(PCA0_CHAN1, duty_cycle1 << 8);
 259                }
 260              }
 261           */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    140    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
