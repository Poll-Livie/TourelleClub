C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/14/2022 20:24:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PCA_LIB_8BITCENTERPWM
OBJECT MODULE PLACED IN .\src/PCA_Lib_8bitCenterPWM.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.60\BIN\C51.
                    -exe /Users/paul_leveque/Documents/10_Projets/EFM8BB1_PCA_Lib_8bitCenterPWM/src/PCA_Lib_8bitCenterPWM.c OMF2 SMALL DEBUG 
                    -OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INC
                    -DIR(/Users/paul_leveque/Documents/10_Projets/EFM8BB1_PCA_Lib_8bitCenterPWM/inc;/Users/paul_leveque/Documents/10_Projets/
                    -EFM8BB1_PCA_Lib_8bitCenterPWM/inc/config;/Users/paul_leveque/Documents/10_Projets/EFM8BB1_PCA_Lib_8bitCenterPWM/drivers;
                    -/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.2.4//Lib/efm8_assert;/Applications/Simplicit
                    -y Studio.app/Contents/Eclipse/developer/sdks/8051/v4.2.4//Device/shared/si8051Base;/Applications/Simplicity Studio.app/C
                    -ontents/Eclipse/developer/sdks/8051/v4.2.4//Device/EFM8BB1/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/deve
                    -loper/sdks/8051/v4.2.4//kits/common/bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.2.4/
                    -/kits/EFM8BB1_LCK/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.2.4//Device/EFM8BB1
                    -/peripheral_driver/inc) PRINT(.\src/PCA_Lib_8bitCenterPWM.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/PCA_Lib_8
                    -bitCenterPWM.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // PCA_Lib_8bitCenterPWM.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program sends two center-aligned PWM waveforms out of two I/O pins
  10          // using the PCA's 8-bit Center-Aligned PWM Output Mode. The duty cycles of
  11          // the waveforms are modified periodically within the main loop, and the
  12          // waveforms are increasing/decreasing opposite of each other.
  13          //
  14          // In this example, PCA Modules 0 and 1 are used to generate the waveforms, and
  15          // the crossbar is configured to send the CEX0 signal out on P1.4 and the CEX1
  16          // signal out on P1.5.
  17          //
  18          // Resources:
  19          //   SYSCLK - 24.5 MHz HFOSC / 1
  20          //   PCA    - 8-bit PWM
  21          //   P0.0   - SPI SCK
  22          //   P0.1   - SPI MISO
  23          //   P0.2   - SPI MOSI
  24          //   P0.3   - SPI NSS
  25          //   UART0  - 115200 baud, 8-N-1
  26          //   Timer1 - UART0 clock source
  27          //   P0.4   - UART0 TX
  28          //   P0.5   - UART0 RX
  29          //   P1.4   - PCA CEX0 / LED
  30          //
  31          //-----------------------------------------------------------------------------
  32          // How To Test: EFM8BB1 LCK
  33          //-----------------------------------------------------------------------------
  34          // 1) Connect the EFM8BB1 LCK board to a PC using a micro USB cable.
  35          // 2) Compile and download code to the EFM8BB1 LCK board.
  36          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  37          //    click the Debug button in the quick menu, or press F11.
  38          // 3) Run the code.
  39          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  40          //    click the Resume button in the quick menu, or press F8.
  41          // 4) Place an oscilloscope probe on P1.4 and P1.5.
  42          // 5) Verify that the duty cycle of the waveforms vary smoothly between
  43          //    minimum and maximum values.
  44          //
  45          // Target:         EFM8BB1
C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/14/2022 20:24:25 PAGE 2   

  46          // Tool chain:     Generic
  47          //
  48          // Release 0.1 (ST)
  49          //    - Initial Revision
  50          //    - 10 OCT 2014
  51          //
  52          
  53          //-----------------------------------------------------------------------------
  54          // Includes
  55          //-----------------------------------------------------------------------------
  56          #include "bsp.h"
  57          #include "InitDevice.h"
  58          
  59          /*
  60           * #include "SPI0_Lib_Slave.h"
  61           * #include "spi_0.h"
  62           * #include <string.h>
  63           *
  64           */
  65          #include "uart_0.h"
  66          
  67          #include "pca_0.h"
  68          
  69          #include "direction.h"
  70          
  71          //-----------------------------------------------------------------------------
  72          // Global Constants
  73          //-----------------------------------------------------------------------------
  74          #define BUFFER_LENGTH   4
  75          
  76          //-----------------------------------------------------------------------------
  77          // Global Variables
  78          //-----------------------------------------------------------------------------
  79          SI_SEGMENT_VARIABLE(buffer[BUFFER_LENGTH], uint8_t, SI_SEG_XDATA);
  80          
  81          tourelle_uart_protocol dataFromRaspberry;
  82          
  83          //-----------------------------------------------------------------------------
  84          // SiLabs_Startup() Routine
  85          // ----------------------------------------------------------------------------
  86          // This function is called immediately after reset, before the initialization
  87          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  88          // useful place to disable the watchdog timer, which is enable by default
  89          // and may trigger before main() in some instances.
  90          //-----------------------------------------------------------------------------
  91          void SiLabs_Startup (void)
  92          {
  93   1        // Disable the watchdog here
  94   1      }
  95          
  96          //-----------------------------------------------------------------------------
  97          // Main Routine
  98          //-----------------------------------------------------------------------------
  99          void main(void)
 100          {
 101   1        // uint8_t command;
 102   1      
 103   1        enter_DefaultMode_from_RESET();
 104   1        UART0_init(UART0_RX_ENABLE, UART0_WIDTH_8, UART0_MULTIPROC_DISABLE);
 105   1      
 106   1        init_portsIn();
 107   1        IE_EA = 1;
 108   1      
C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/14/2022 20:24:25 PAGE 3   

 109   1        while (1)
 110   1          {
 111   2            if ((UART0_rxBytesRemaining() == 0) && (UART0_txBytesRemaining() == 0))
 112   2            {
 113   3               UART0_readBuffer(buffer, BUFFER_LENGTH);
 114   3            }
 115   2            if (dataFromRaspberry.bufferedData[0] != 0){
 116   3              switch (dataFromRaspberry.bufferedData[0]) {
 117   4                case FORWARD_PROTOCOL_LETTER:
 118   4                  go_forward(dataFromRaspberry.bufferedData[1]);
 119   4                  break;
 120   4                case BACKWARD_PROTOCOL_LETTER:
 121   4                  go_backward(dataFromRaspberry.bufferedData[1]);
 122   4                  break;
 123   4                case TURN_LEFT_PROTOCOL_LETTER:
 124   4                  turn_left(dataFromRaspberry.bufferedData[1]);
 125   4                  break;
 126   4                case TURN_RIGHT_PROTOCOL_LETTER:
 127   4                  turn_right(dataFromRaspberry.bufferedData[1]);
 128   4                  break;
 129   4                default:
 130   4                  break;
 131   4              }
 132   3              dataFromRaspberry.bufferedData[0] = 0;
 133   3              dataFromRaspberry.bufferedData[1] = 0;
 134   3            }
 135   2      
 136   2          }
 137   1      }
 138          
 139          
 140          //-----------------------------------------------------------------------------
 141          // UART ISR Callbacks
 142          //-----------------------------------------------------------------------------
 143          void UART0_receiveCompleteCb()
 144          {
 145   1         uint8_t i;
 146   1         unsigned char byte;
 147   1      
 148   1      
 149   1      
 150   1         for (i = 0; i<BUFFER_LENGTH; i++)
 151   1         {
 152   2            byte = buffer[i];
 153   2      
 154   2            /*
 155   2             * Place to put Command Analysis
 156   2             */
 157   2            if (i == 0 || i == 1){
 158   3                dataFromRaspberry.bufferedData[i] = (uint8_t)byte;
 159   3            }
 160   2      
 161   2            buffer[i] = byte;
 162   2         }
 163   1         UART0_writeBuffer(buffer, BUFFER_LENGTH);
 164   1         // analyseCommandFromRaspberry();
 165   1      }
 166          
 167          void UART0_transmitCompleteCb ()
 168          {
 169   1      }
 170          
 171          
C51 COMPILER V9.60.0.0   PCA_LIB_8BITCENTERPWM                                             11/14/2022 20:24:25 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    158    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
